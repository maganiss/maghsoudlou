<div class="panel panel-default"  style="overflow:hidden">
	<div class="panel-heading"><h4>وضعیت امتیازات</h4></div>
	<div class="panel-body">
		<div class="col-md-4">	
			<% point_view = "امتیاز اشتراک دانش: #{current_user.points}" %>
			<a class="btn btn-success"><%= point_view%></a>

			<%= render :partial => 'home/points_modal'%>



<% if current_user.points< 101%>
	<% title = "طلب"%>
	<% titleplus = "عشق"%>
	<% percent = current_user.points %>
<% elsif current_user.points< 201 %>
	<% title = "عشق"%>
	<% titleplus = "محو"%>
	<% percent = (current_user.points-100) %>
<% elsif current_user.points< 301 %>
	<% title = "محو"%>
	<% titleplus = "فنا"%>
	<% percent = (current_user.points-200) %>
<% else%>
	<% title = "فنا"%>
	<% percent = (current_user.points-300) %>
<% end %>


			<div id="myStat1" data-dimension="160" data-text="<%=	percent%>%" data-info="<%=title%>" data-width="10" data-fontsize="20" data-percent="<%=percent%>" data-fgcolor="#a9dc61" data-bgcolor="#eee" data-fill="#ddd" data-total="100" data-part="<%=percent%>" data-icon="long-arrow-up" data-icon-size="28" data-icon-color="#fff" style="padding-top:10px;"></div>			
	
		</div>
		<div class="col-md-1"></div>
		<div class="col-md-8">
		<!--<div class="col-md-5" style="padding-top:30px;" ><%= image_tag "soldier.png", :alt => "rss feed" , :size => "80x80" , :style => "overflow:hidden; border-radius:90%", title:'به زودی...'%><br><br>شما سرباز دانش هستید.</div>-->

		
		<div class="col-md-6" style="padding-top:30px;" ><a href="#"><%= image_tag "market.png", :alt => "rss feed" , :size => "180x80" ,:style => "overflow:hidden; border-radius:1%", title:'به زودی...'%></a><br><br>با امتیازات خود از اینجا خرید کنید!</div>

		
				
		<div class="col-md-6" style="padding-top:30px;" ><%= image_tag "Next_Level_Training_Logo.jpg", :alt => "rss feed" , :size => "180x80" ,:style => "overflow:hidden; border-radius:5%"%><br><br> شما برای رسیدن به مرحله <%= titleplus %> باید <%= 100 - percent %> امتیاز دیگر دریافت کنید!</div>
		
		
		</div>
		
		<!--
			<br>
      <div class="btn btn-xs btn-danger"></div>امتیاز اشتراک دانش<br>
      <div class="btn btn-xs btn-info"></div>امتیاز خبرگی<br><br>

			<div class="progress">
	      <div class="progress-bar progress-bar-info" style="width: 35%"><span class="sr-only">35% Complete (info)</span></div>
	      <div class="progress-bar progress-bar-danger" style="width: 65%"><span class='sr-only'>65% Complete (danger)</span></div>
	    </div>-->
	</div>
</div>
	
	
	<style>

.circliful {
    position: relative; 
}

.circle-text, .circle-info, .circle-text-half, .circle-info-half {
    width: 100%;
    position: absolute;
    text-align: center;
    display: inline-block;
}

.circle-info, .circle-info-half {
	color: #999;
}

.circliful .fa {
	margin: -10px 3px 0 3px;
	position: relative;
	bottom: 4px;
}
</style>

	<script>
		$( document ).ready(function() {
        $('#myStat1').circliful();
    });
    
    
    (function ($) {

    $.fn.circliful = function (options, callback) {

        var settings = $.extend({
            // These are the defaults.
            startdegree: 0,
            fgcolor: "#556b2f",
            bgcolor: "#eee",
            fill: false,
            width: 15,
            dimension: 200,
            fontsize: 15,
            percent: 50,
            animationstep: 1.0,
            iconsize: '20px',
            iconcolor: '#999',
            border: 'default',
            complete: null,
            bordersize: 10
        }, options);

        return this.each(function () {

            var customSettings = ["fgcolor", "bgcolor", "fill", "width", "dimension", "fontsize", "animationstep", "endPercent", "icon", "iconcolor", "iconsize", "border", "startdegree", "bordersize"];

            var customSettingsObj = {};
            var icon = '';
            var endPercent = 0;
            var obj = $(this);
            var fill = false;
            var text, info;

            obj.addClass('circliful');

            checkDataAttributes(obj);

            if (obj.data('text') != undefined) {
                text = obj.data('text');

                if (obj.data('icon') != undefined) {
                    icon = $('<i></i>')
                        .addClass('fa ' + $(this).data('icon'))
                        .css({
                            'color': customSettingsObj.iconcolor,
                            'font-size': customSettingsObj.iconsize
                        });
                }

                if (obj.data('type') != undefined) {
                    type = $(this).data('type');

                    if (type == 'half') {
                        addCircleText(obj, 'circle-text-half', (customSettingsObj.dimension / 1.45));
                    } else {
                        addCircleText(obj, 'circle-text', customSettingsObj.dimension);
                    }
                } else {
                    addCircleText(obj, 'circle-text', customSettingsObj.dimension);
                }
            }

            if ($(this).data("total") != undefined && $(this).data("part") != undefined) {
                var total = $(this).data("total") / 100;

                percent = (($(this).data("part") / total) / 100).toFixed(3);
                endPercent = ($(this).data("part") / total).toFixed(3)
            } else {
                if ($(this).data("percent") != undefined) {
                    percent = $(this).data("percent") / 100;
                    endPercent = $(this).data("percent")
                } else {
                    percent = settings.percent / 100
                }
            }

            if ($(this).data('info') != undefined) {
                info = $(this).data('info');

                if ($(this).data('type') != undefined) {
                    type = $(this).data('type');

                    if (type == 'half') {
                        addInfoText(obj, 0.9);
                    } else {
                        addInfoText(obj, 1.25);
                    }
                } else {
                    addInfoText(obj, 1.25);
                }
            }

            $(this).width(customSettingsObj.dimension + 'px');

            var canvas = $('<canvas></canvas>').attr({
                width: customSettingsObj.dimension,
                height: customSettingsObj.dimension
            }).appendTo($(this)).get(0);

            var context = canvas.getContext('2d');
            var container = $(canvas).parent();
            var x = canvas.width / 2;
            var y = canvas.height / 2;
            var degrees = customSettingsObj.percent * 360.0;
            var radians = degrees * (Math.PI / 180);
            var radius = canvas.width / 2.5;
            var startAngle = 2.3 * Math.PI;
            var endAngle = 0;
            var counterClockwise = false;
            var curPerc = customSettingsObj.animationstep === 0.0 ? endPercent : 0.0;
            var curStep = Math.max(customSettingsObj.animationstep, 0.0);
            var circ = Math.PI * 2;
            var quart = Math.PI / 2;
            var type = '';
            var fireCallback = true;
            var additionalAngelPI = (customSettingsObj.startdegree / 180) * Math.PI;

            if ($(this).data('type') != undefined) {
                type = $(this).data('type');

                if (type == 'half') {
                    startAngle = 2.0 * Math.PI;
                    endAngle = 3.13;
                    circ = Math.PI;
                    quart = Math.PI / 0.996;
                }
            }

            //Run function when browser resizes
            $(window).resize(respondCanvas);

            function respondCanvas() {
                $(canvas).attr('width', $(container).width()); //max width

                if(type == 'half') {
                    $(canvas).attr('height', $(container).height() / 2); //max height
                } else {
                    $(canvas).attr('height', $(container).height()); //max height
                }

                //Call a function to redraw other content (texts, images etc)
            }

            //Initial call 
            respondCanvas();

            /**
             * adds text to circle
             *
             * @param obj
             * @param cssClass
             * @param lineHeight
             */
            function addCircleText(obj, cssClass, lineHeight) {
                $("<span></span>")
                    .appendTo(obj)
                    .addClass(cssClass)
                    .text(text)
                    .prepend(icon)
                    .css({
                        'line-height': lineHeight + 'px',
                        'font-size': customSettingsObj.fontsize + 'px'
                    });
            }

            /**
             * adds info text to circle
             *
             * @param obj
             * @param factor
             */
            function addInfoText(obj, factor) {
                $('<span></span>')
                    .appendTo(obj)
                    .addClass('circle-info-half')
                    .css(
                        'line-height', (customSettingsObj.dimension * factor) + 'px'
                    )
                    .text(info);
            }

            /**
             * checks which data attributes are defined
             * @param obj
             */
            function checkDataAttributes(obj) {
                $.each(customSettings, function (index, attribute) {
                    if (obj.data(attribute) != undefined) {
                        customSettingsObj[attribute] = obj.data(attribute);
                    } else {
                        customSettingsObj[attribute] = $(settings).attr(attribute);
                    }

                    if (attribute == 'fill' && obj.data('fill') != undefined) {
                        fill = true;
                    }
                });
            }

            /**
             * animate foreground circle
             * @param current
             */
            function animate(current) {

                context.clearRect(0, 0, canvas.width, canvas.height);

                context.beginPath();
                context.arc(x, y, radius, endAngle, startAngle, false);

                context.lineWidth = customSettingsObj.bordersize + 1;

                context.strokeStyle = customSettingsObj.bgcolor;
                context.stroke();

                if (fill) {
                    context.fillStyle = customSettingsObj.fill;
                    context.fill();
                }

                context.beginPath();
                context.arc(x, y, radius, -(quart) + additionalAngelPI, ((circ) * current) - quart + additionalAngelPI, false);

                if (customSettingsObj.border == 'outline') {
                    context.lineWidth = customSettingsObj.width + 13;
                } else if (customSettingsObj.border == 'inline') {
                    context.lineWidth = customSettingsObj.width - 13;
                }

                context.strokeStyle = customSettingsObj.fgcolor;
                context.stroke();

                if (curPerc < endPercent) {
                    curPerc += curStep;
                    requestAnimationFrame(function () {
                        animate(Math.min(curPerc, endPercent) / 100);
                    }, obj);
                }

                if (curPerc == endPercent && fireCallback && typeof(options) != "undefined") {
                    if ($.isFunction(options.complete)) {
                        options.complete();

                        fireCallback = false;
                    }
                }
            }

            animate(curPerc / 100);

        });
    };
}(jQuery));
</script>

